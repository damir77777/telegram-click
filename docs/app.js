// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram Web App
const tg = window.Telegram.WebApp;

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let balance = 0;
let clickPower = 1;
let passiveIncome = 1;
let clickLevel = 1;
let clickXP = 0;
const xpPerLevel = 50;

const balanceEl = document.getElementById('balance');
const clickPowerEl = document.getElementById('clickPower');
const passiveIncomeEl = document.getElementById('passiveIncome');
const clickLevelEl = document.getElementById('clickLevel');
const clickImage = document.getElementById('clickImage');
const clickProgressEl = document.getElementById('clickProgress');
const leaderboardEl = document.getElementById('leaderboard');

const frames = [,"frames/frame2.png","frames/frame3.png"];
let frameIndex = 0;

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
function updateStats(){
    balanceEl.textContent = balance;
    clickPowerEl.textContent = clickPower;
    passiveIncomeEl.textContent = passiveIncome;
    clickLevelEl.textContent = clickLevel;
}

function updateClickProgress() {
    const progress = Math.min((clickXP / xpPerLevel) * 100, 100);
    clickProgressEl.style.width = progress + '%';
    if(clickXP >= xpPerLevel){
        clickLevel++;
        clickXP -= xpPerLevel;
        clickPower += 1;
        updateStats();
        animateLevelUp();
    }
}

function animateLevelUp() {
    clickImage.style.transform = "scale(1.2)";
    clickImage.style.animation = "jump 0.3s";
    setTimeout(() => {
        clickImage.style.transform = "scale(1)";
        clickImage.style.animation = "";
    }, 300);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ—Ç–∞
function sendDataToBot(data){
    if(tg) {
        tg.sendData(JSON.stringify(data));
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
function loadProgress() {
    sendDataToBot({action: "get_stats"});
}

// –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–∏–Ω–∫–µ
clickImage.addEventListener('click', () => {
    balance += clickPower;
    clickXP += clickPower;

    updateStats();
    updateClickProgress();

    frameIndex = (frameIndex + 1) % frames.length;
    clickImage.src = frames[frameIndex];
    clickImage.style.animation = "jump 0.3s";
    setTimeout(() => clickImage.style.animation = "", 300);

    sendDataToBot({action: "click", balance, clickPower, clickLevel, passiveIncome});
});

// –£–ª—É—á—à–µ–Ω–∏–µ –∫–ª–∏–∫–∞
document.getElementById('upgradeClick').addEventListener('click', () => {
    if(balance >= 10){
        balance -= 10;
        clickPower += 1;
        updateStats();
        sendDataToBot({action: "upgradeClick", balance, clickPower});
    }
});

// –£–ª—É—á—à–µ–Ω–∏–µ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
document.getElementById('upgradePassive').addEventListener('click', () => {
    if(balance >= 20){
        balance -= 20;
        passiveIncome += 1;
        updateStats();
        sendDataToBot({action: "upgradePassive", balance, passiveIncome});
    }
});

// –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
setInterval(() => {
    balance += passiveIncome;
    updateStats();
    sendDataToBot({action: "passiveIncome", balance, passiveIncome});
}, 60000);

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ –≤ Web App
function updateLeaderboard(users){
    leaderboardEl.innerHTML = "<h3>üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤</h3>";
    users.forEach((user, i) => {
        const medal = i === 0 ? "ü•á" : i === 1 ? "ü•à" : i === 2 ? "ü•â" : `${i+1}Ô∏è‚É£`;
        const el = document.createElement('p');
        el.textContent = `${medal} ${user.name} ‚Äî ${user.balance} üí∞`;
        leaderboardEl.appendChild(el);
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —Ç–æ–ø–∞ –æ—Ç –±–æ—Ç–∞
tg.onEvent('data', (msg) => {
    try {
        const data = JSON.parse(msg);
        if(data.type === "stats"){
            balance = data.balance;
            clickPower = data.clickPower;
            passiveIncome = data.passiveIncome;
            clickLevel = data.clickLevel;
            clickXP = data.clickXP;
            updateStats();
            updateClickProgress();
        } else if(data.type === "top"){
            updateLeaderboard(data.top);
        }
    } catch(e) {
        console.error(e);
    }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
loadProgress();

